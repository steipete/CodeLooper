#!/bin/bash
# Script to run Tuist generate and fix Sendable compliance issues
#
# Why this script exists:
# ---------------------
# Swift 6 introduces strict Sendable checking which requires all types shared across
# actor/concurrency boundaries to be Sendable-compliant. Tuist's autogenerated Info.plist
# constants use [String: Any] types which are not Sendable because they can contain shared 
# mutable state. This causes compile errors like:
#
# "Static property 'nsAppTransportSecurity' is not concurrency-safe because non-'Sendable'
# type '[String : Any]' may have shared mutable state"
#
# This script:
# 1. Runs tuist generate to create the Xcode project
# 2. Automatically patches the generated TuistPlists+FriendshipAI.swift file to:
#    - Change [String: Any] to [String: Bool] for nsAppTransportSecurity
#    - Change [[String: Any]] to [[String: String]] for cfBundleURLTypes
#
# This allows us to maintain Swift 6 concurrency safety without modifying Tuist's
# generation process directly.

set -e

# Change to the mac directory if needed
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
MAC_DIR="$(dirname "$SCRIPT_DIR")"
cd "$MAC_DIR"

echo "Running Tuist generate..."
tuist generate

echo "Fixing Sendable compliance issues..."

# Fixed path for the generated file
TUIST_PLISTS_FILE="./Derived/Sources/TuistPlists+FriendshipAI.swift"

if [ -f "$TUIST_PLISTS_FILE" ]; then
    echo "Processing $TUIST_PLISTS_FILE..."
    
    # Fix NSAppTransportSecurity - this is a simple case with just Bool values
    # We replace [String: Any] with [String: Bool] since NSAllowsArbitraryLoads is always a boolean
    if grep -q "nsAppTransportSecurity: \[String: Any\]" "$TUIST_PLISTS_FILE"; then
        echo "Found nsAppTransportSecurity with [String: Any] type"
        sed -i '' 's/nsAppTransportSecurity: \[String: Any\]/nsAppTransportSecurity: [String: Bool]/g' "$TUIST_PLISTS_FILE"
        echo "Fixed nsAppTransportSecurity type"
    fi
    
    # Fix cfBundleURLTypes - simplified approach using String:String dictionary
    if grep -q "cfBundleURLTypes: \[\[String: Any\]\]" "$TUIST_PLISTS_FILE"; then
        echo "Found cfBundleURLTypes with [[String: Any]] type"
        
        # Replace with Sendable-compatible type
        sed -i '' 's/cfBundleURLTypes: \[\[String: Any\]\]/cfBundleURLTypes: [[String: String]]/g' "$TUIST_PLISTS_FILE"
        
        # Convert array value to string for simpler typing
        sed -i '' 's/\[\["CFBundleTypeRole": "Viewer", "CFBundleURLName": "com.friendshipai.auth", "CFBundleURLSchemes": \["friendship-ai"\]\]\]/[["CFBundleTypeRole": "Viewer", "CFBundleURLName": "com.friendshipai.auth", "CFBundleURLSchemes": "friendship-ai"]]/g' "$TUIST_PLISTS_FILE"
        
        echo "Fixed cfBundleURLTypes type with simpler [String: String] dictionary"
    fi
else
    echo "Tuist plists file not found at: $TUIST_PLISTS_FILE"
fi

# Now fix the ResourceLoader class to properly handle the NSAppTransportSecurity typed values
RESOURCE_LOADER_FILE="./Sources/Utilities/Resources/ResourceLoader.swift"

if [ -f "$RESOURCE_LOADER_FILE" ]; then
    echo "Processing $RESOURCE_LOADER_FILE..."

    # Replace the generic getAppTransportSecurityValue method with a typed Bool-specific version
    # This fixes the "Cannot explicitly specialize static method" error
    if grep -q "getAppTransportSecurityValue<T>(for key: String) -> T?" "$RESOURCE_LOADER_FILE" || \
       grep -q "getAppTransportSecurityValue(for key: String) -> T?" "$RESOURCE_LOADER_FILE"; then
        
        echo "Replacing generic getAppTransportSecurityValue with Bool-specific version"
        
        # Create the replacement function for AppTransportSecurity
        REPLACEMENT_FUNC='    // Get a value from the NSAppTransportSecurity dictionary with specific type
    public static func getAppTransportSecurityBoolValue(for key: String) -> Bool? {
        guard let atsDict = Bundle.main.infoDictionary?[InfoKey.NSAppTransportSecurity.key] as? [String: Bool] else {
            return nil
        }
        return atsDict[key]
    }'
        
        # Use awk to replace the function
        awk -v replacement="$REPLACEMENT_FUNC" '
        /public static func getAppTransportSecurityValue/ {
            in_func = 1
            print replacement
            next
        }
        in_func && /return atsDict\[key\] as\? T/ {
            in_func = 0
            next
        }
        !in_func {
            print
        }' "$RESOURCE_LOADER_FILE" > "$RESOURCE_LOADER_FILE.tmp"
        
        mv "$RESOURCE_LOADER_FILE.tmp" "$RESOURCE_LOADER_FILE"
        
        # Fix the allowsArbitraryNetworkLoads method to use the new function
        sed -i '' 's/getAppTransportSecurityValue<Bool>(for: InfoKey.NSAppTransportSecurity.allowsArbitraryLoads) ?? false/getAppTransportSecurityBoolValue(for: InfoKey.NSAppTransportSecurity.allowsArbitraryLoads) ?? false/g' "$RESOURCE_LOADER_FILE"
        sed -i '' 's/getAppTransportSecurityValue(for: InfoKey.NSAppTransportSecurity.allowsArbitraryLoads) as? Bool ?? false/getAppTransportSecurityBoolValue(for: InfoKey.NSAppTransportSecurity.allowsArbitraryLoads) ?? false/g' "$RESOURCE_LOADER_FILE"
        
        echo "Fixed App Transport Security access methods"
    fi
    
    # Fix the getURLScheme method to use the simple String approach
    if grep -q "urlTypes = Bundle.main.infoDictionary?\[InfoKey.Bundle.urlTypes\] as? \[\[String: Any\]\]" "$RESOURCE_LOADER_FILE"; then
        echo "Found URLTypes with [[String: Any]] in ResourceLoader"
        
        # Replace the URLTypes function with a fixed version for [[String: String]]
        sed -i '' 's/urlTypes = Bundle.main.infoDictionary?\[InfoKey.Bundle.urlTypes\] as? \[\[String: Any\]\]/urlTypes = Bundle.main.infoDictionary?[InfoKey.Bundle.urlTypes] as? [[String: String]]/g' "$RESOURCE_LOADER_FILE"
        
        # Update the array access to handle string value instead of array
        sed -i '' 's/let urlSchemes = firstUrlType\[InfoKey.CFBundleURL.schemes\] as? \[String\],/let scheme = firstUrlType[InfoKey.CFBundleURL.schemes],/g' "$RESOURCE_LOADER_FILE"
        
        # Remove the unnecessary array access
        sed -i '' 's/let scheme = urlSchemes.first/\/\/ No need to access first element - scheme is already a String/g' "$RESOURCE_LOADER_FILE"
        
        echo "Fixed URLTypes handling to use [String: String] dictionary"
    fi
    
else
    echo "ResourceLoader file not found at: $RESOURCE_LOADER_FILE"
fi

# Let Tuist handle copying resources

# Project configuration is handled by Tuist
echo "Project configuration complete"

echo "Project generation and Sendable fixes complete!"
echo "You can now open the Xcode project:"
echo "open FriendshipAI.xcworkspace"