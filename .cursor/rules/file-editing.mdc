---
description: Advanced file editing patterns using command-line tools
globs: 
alwaysApply: false
---

# Advanced File Editing Patterns

This document provides guidance for complex file editing operations using command-line tools, optimized for AI assistant usage.

## Core Philosophy for AI Assistants

- **Perl is the Workhorse**: Prioritize Perl for regex operations, in-place editing with backups (`-pi.bak`), multi-line handling (`-0777` slurp mode), and range operators (`/START/../END/`)
- **`ripgrep` (`rg`) for Extraction**: Use `rg` for fast finding and extracting content blocks
- **One-Liners**: Aim for concise, powerful one-line commands
- **Backups are Non-Negotiable**: Always include `.bak` with Perl's `-i` or manual `cp`
- **Regex Quoting**: Single quotes (`'...'`) are default for Perl regex on command line
- **Specificity & Non-Greedy**: Generate specific start/end regexes with non-greedy matching (`.*?`)

## Pattern Templates

### 1. Editing Text Within a Defined Block (In-Place)

**Goal**: Modify specific text found between `START_REGEX` and `END_REGEX`

```bash
perl -pi.bak -e 'if (/START_REGEX/../END_REGEX/) { s/REGEX_WITHIN_BLOCK/NEW_TEXT_CONTENT/g }' source_file.txt
```

**Example**: Update version number in Swift Package.swift
```bash
perl -pi.bak -e 'if (/let version/../"/) { s/"\d+\.\d+\.\d+"/"1.2.3"/g }' Package.swift
```

### 2. Replacing an Entire Block of Text (In-Place)

**Goal**: Replace whole block from `START_REGEX` to `END_REGEX` with new content

```bash
perl -0777 -pi.bak -e 's/FULL_BLOCK_REGEX_PCRE/NEW_TEXT_CONTENT/sg' source_file.txt
```

**Example**: Replace entire SwiftLint rule configuration
```bash
perl -0777 -pi.bak -e 's/(?s)disabled_rules:.*?^opt_in_rules:/disabled_rules:\n  - trailing_whitespace\n\nopt_in_rules:/sm' .swiftlint.yml
```

### 3. Deleting a Block of Text (In-Place)

**Goal**: Remove everything from `START_REGEX` to `END_REGEX`

**Option A (Range Operator)**:
```bash
perl -ni.bak -e 'print unless /START_REGEX/../END_REGEX/' source_file.txt
```

**Option B (Slurp Mode)**:
```bash
perl -0777 -pi.bak -e 's/FULL_BLOCK_REGEX_PCRE//sg' source_file.txt
```

**Example**: Remove entire comment block
```bash
perl -ni.bak -e 'print unless /^\/\*\*/../\*\/$/' MyFile.swift
```

### 4. Adding/Inserting New Block of Text (In-Place)

**Goal**: Insert new content after a marker line

**Insert After Marker**:
```bash
perl -pi.bak -e 'if (s/TARGET_INSERTION_MARKER_REGEX/$&\nNEW_TEXT_CONTENT/) {}' source_file.txt
```

**Using Environment Variable for Complex Content**:
```bash
NEW_BLOCK_VAR="$NEW_TEXT_CONTENT" perl -pi.bak -e 'if (s/TARGET_INSERTION_MARKER_REGEX/$&\n$ENV{NEW_BLOCK_VAR}/) {}' source_file.txt
```

**Example**: Add new import after existing imports
```bash
perl -pi.bak -e 'if (s/(^import Foundation$)/$1\nimport AXorcist/) {}' MyFile.swift
```

## Advanced Patterns for Swift/macOS Projects

### SwiftLint Configuration Updates
```bash
# Add new disabled rule
perl -pi.bak -e 'if (/^disabled_rules:/../^$/) { s/^$/  - new_rule\n/ if /^$/ }' .swiftlint.yml

# Update line length warning
perl -pi.bak -e 's/(line_length:\s*\n\s*warning:\s*)\d+/${1}120/' .swiftlint.yml
```

### Package.swift Dependency Management
```bash
# Add new dependency
NEW_DEP='        .package(url: "https://github.com/user/repo.git", from: "1.0.0"),' 
echo "$NEW_DEP" | perl -pi.bak -e 'if (/dependencies:\s*\[/../\]/) { s/^(\s*\.package.*)$/$1\n$ENV{NEW_DEP}/ if eof }' Package.swift
```

### Swift Source Code Modifications
```bash
# Add import statement
perl -pi.bak -e 'if (/^import / && !$seen++) { print "import AXorcist\n" }' *.swift

# Update @MainActor annotations
perl -pi.bak -e 's/^(\s*)(class|struct)(\s+\w+.*\{)$/$1@MainActor\n$1$2$3/' ViewModels/*.swift
```

## Moving Blocks Between Files

**Goal**: Extract block from source, insert into target, delete from source

```bash
# Step 1: Extract block into shell variable
EXTRACTED_BLOCK=$(perl -0777 -ne 'print $& if /FULL_BLOCK_REGEX_PCRE/sg' source_file.txt)

# Check if block was extracted
if [ -z "$EXTRACTED_BLOCK" ]; then
  echo "Error: Block not found in source_file.txt"
else
  # Step 2: Insert block into target
  BLOCK_TO_INSERT="$EXTRACTED_BLOCK" \
  perl -pi.bak_target -e 's/(TARGET_INSERTION_MARKER_REGEX)/$1\n$ENV{BLOCK_TO_INSERT}/' target_file.txt && \
  \
  # Step 3: Delete block from source
  perl -0777 -pi.bak_source -e 's/FULL_BLOCK_REGEX_PCRE//sg' source_file.txt && \
  echo "Block moved successfully."
fi
```

## Best Practices for AI Assistants

### Regex Generation Guidelines
1. **Request PCRE explicitly**: "Generate a Perl Compatible Regular Expression..."
2. **Emphasize non-greedy**: "Use non-greedy matching (.*?) with the s flag"
3. **Include backup mechanism**: "Always include Perl's -pi.bak"
4. **Specify multi-line handling**: "Use -0777 slurp mode for whole-block operations"

### Error Prevention
- Test regex with simple cases first
- Use environment variables for complex replacement text
- Validate file existence before operations
- Check backup files were created

### Common Swift/macOS File Patterns

#### Configuration Files
- **SwiftLint**: `.swiftlint.yml` - YAML structure with nested rules
- **Package.swift**: Swift Package Manager - structured Swift code
- **Info.plist**: XML property lists - use specialized tools or careful regex

#### Source Files
- **Swift files**: Respect Swift syntax, imports, class/struct boundaries
- **Markdown docs**: Preserve formatting, handle code blocks specially
- **Shell scripts**: Be careful with quoting and escaping

### Debugging File Operations
```bash
# Before operation - create manual backup
cp important_file.swift important_file.swift.manual_backup

# Test regex matching without modification
perl -ne 'print if /YOUR_REGEX/' test_file.txt

# Verify backup was created
ls -la *.bak

# Compare changes
diff original_file.txt original_file.txt.bak
```

This guide ensures reliable, repeatable file editing operations that maintain data integrity through proper backup mechanisms.